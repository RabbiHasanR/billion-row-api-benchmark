services:
  master_db:
    build:
      context: ./master_slave_replication/master
      dockerfile: Dockerfile
    container_name: master_db
    hostname: master_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./master_slave_replication/master/data:/var/lib/postgresql/data
    command: postgres -c config_file=/var/lib/postgresql/data/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
  
  slave_db_one:
    build:
      context: ./master_slave_replication/slave
      dockerfile: Dockerfile.slave_db_one
    container_name: slave_db_one
    hostname: slave_db_one
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATOR_USER: ${REPLICATOR_USER}
      REPLICATOR_PASSWORD: ${REPLICATOR_PASSWORD}
      MASTER_HOST: master_db
    depends_on:
      master_db:
        condition: service_healthy
    volumes:
      - ./master_slave_replication/slave/data:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  
  slave_db_two:
    build:
      context: ./master_slave_replication/slave
      dockerfile: Dockerfile.slave_db_two
    container_name: slave_db_two
    hostname: slave_db_two
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATOR_USER: ${REPLICATOR_USER}
      REPLICATOR_PASSWORD: ${REPLICATOR_PASSWORD}
      MASTER_HOST: master_db
    depends_on:
      master_db:
        condition: service_healthy
    volumes:
      - ./master_slave_replication/slave/data_two:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  
  # pgbouncer_master:
  #   build:
  #     context: ./pgbouncer
  #     dockerfile: Dockerfile.pgbouncer_master
  #   container_name: pgbouncer_master
  #   hostname: pgbouncer_master
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   entrypoint: ["/bin/sh", "-c", "/usr/local/bin/generate_userlist.sh && pgbouncer /etc/pgbouncer/pgbouncer.ini"]
  #   volumes:
  #     - ./pgbouncer/pgbouncer_master.ini:/etc/pgbouncer/pgbouncer.ini
  #   depends_on:
  #     - master_db

  
  # pgbouncer_slave:
  #   build:
  #     context: ./pgbouncer
  #     dockerfile: Dockerfile.pgbouncer_slave
  #   container_name: pgbouncer_slave
  #   hostname: pgbouncer_slave
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   entrypoint: ["/bin/sh", "-c", "/usr/local/bin/generate_userlist.sh && pgbouncer /etc/pgbouncer/pgbouncer.ini"]
  #   volumes:
  #     - ./pgbouncer/pgbouncer_slave.ini:/etc/pgbouncer/pgbouncer.ini
  #   depends_on:
  #     - slave_db


  # pgpool:
  #   build:
      # context: ./pgpool
      # dockerfile: Dockerfile
  #   container_name: pgpool
  #   hostname: pgpool
  #   volumes:
  #     - ./pgpool/pgpool.conf:/usr/local/etc/pgpool.conf
  #     - ./pgpool/pool_hba.conf:/usr/local/etc/pool_hba.conf
  #     - ./pgpool/pcp.conf:/usr/local/etc/pcp.conf
  #     - ./pgpool/logs:/var/log/pgpool-II
    
  #   depends_on:
  #     - pgbouncer_master
  #     - pgbouncer_slave


  # PgPool-II Service
  pgpool:
    build:
      context: ./pgpool
      dockerfile: Dockerfile
    container_name: pgpool
    hostname: pgpool
    volumes:
      - ./pgpool/pgpool.conf:/usr/local/etc/pgpool.conf
      - ./pgpool/pool_hba.conf:/usr/local/etc/pool_hba.conf
      - ./pgpool/pcp.conf:/usr/local/etc/pcp.conf
    depends_on:
      master_db:
        condition: service_healthy
      slave_db_one:
        condition: service_healthy
      slave_db_two:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "9999"]
      interval: 5s
      timeout: 5s
      retries: 10

  

  pgbouncer:
    build:
      context: ./pgbouncer
      dockerfile: Dockerfile
    container_name: pgbouncer
    hostname: pgbouncer
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    entrypoint: ["/bin/sh", "-c", "/usr/local/bin/generate_userlist.sh && pgbouncer /etc/pgbouncer/pgbouncer.ini"]
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
    depends_on:
      pgpool:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 6432 -U ${POSTGRES_USER} -d postgres"]
      interval: 5s      # Effectively once
      timeout: 5s
      retries: 5

  
  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    hostname: api
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATOR_USER: ${REPLICATOR_USER}
      REPLICATOR_PASSWORD: ${REPLICATOR_PASSWORD}
      # MASTER_DB_HOST: master_db
      # MASTER_DB_PORT: 5432
      # MASTER_DB_HOST: pgbouncer_slave
      # MASTER_DB_PORT: 6432
      # MASTER_DB_HOST: pgpool
      # MASTER_DB_PORT: 9999
      MASTER_DB_HOST: pgbouncer
      MASTER_DB_PORT: 6432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    entrypoint: /app/entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "5000:8000"
    # depends_on:
    #   - master_db
    #   - slave_db
    #   - redis
    #   - pgpool

    depends_on:
      redis:
        condition: service_healthy
      # pgpool:
      #   condition: service_healthy
      pgbouncer:
        condition: service_healthy
      
    volumes:
      - ./api:/app


  celery:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: celery
    hostname: celery
    command: celery -A main worker --loglevel=info
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REPLICATOR_USER: ${REPLICATOR_USER}
      REPLICATOR_PASSWORD: ${REPLICATOR_PASSWORD}
      # MASTER_DB_HOST: master_db
      # MASTER_DB_PORT: 5432
      # MASTER_DB_HOST: pgbouncer_slave
      # MASTER_DB_PORT: 6432
      # MASTER_DB_HOST: pgpool
      # MASTER_DB_PORT: 9999
      MASTER_DB_HOST: pgbouncer
      MASTER_DB_PORT: 6432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - ./api:/app
    # depends_on:
    #   - master_db
    #   - slave_db
    #   - redis
    #   - pgpool
    #   - api

    depends_on:
      redis:
        condition: service_healthy
      pgpool:
        condition: service_healthy
      # api:
      #   condition: service_healthy
  


  # pgpool_test:
  #   image: postgres:15-alpine
  #   depends_on:
  #     pgpool:
  #       condition: service_healthy
  #   environment:
  #     - PGPASSWORD=postgres
  #   volumes:
  #   - ./tests:/tests
  #   working_dir: /tests
  #   command: >
  #     sh -c "
  #     while ! pg_isready -h pgpool -p 9999; do sleep 2; done;
  #     sleep 5;
  #     echo '=== TESTING STARTED ===';
  #     psql -h pgpool -p 9999 -U postgres -c 'CREATE TABLE IF NOT EXISTS route_test(id SERIAL PRIMARY KEY, node TEXT, query_type TEXT, created_at TIMESTAMPTZ DEFAULT NOW())';
  #     chmod +x /tests/run_tests.sh && /tests/run_tests.sh;
  #     echo '=== TESTING COMPLETE ===';
  #     "